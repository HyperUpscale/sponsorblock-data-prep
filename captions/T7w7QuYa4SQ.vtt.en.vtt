WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:04.180
Dear Fellow Scholars, this is Two Minute Papers
with Károly Zsolnai-Fehér.

00:00:04.180 --> 00:00:10.020
A few episodes ago, we discussed a new research
work that performs something that they call

00:00:10.020 --> 00:00:11.660
differentiable rendering.

00:00:11.660 --> 00:00:16.779
The problem formulation is the following:
we specify a target image that is either rendered

00:00:16.779 --> 00:00:20.560
by a computer program, or even better, a photo.

00:00:20.560 --> 00:00:25.819
The input is a pitiful approximation of it,
and now, because it progressively changes

00:00:25.819 --> 00:00:31.429
the input materials, textures, and even the
geometry of this input in a 3D modeler system,

00:00:31.429 --> 00:00:33.950
it is able to match this photo.

00:00:33.950 --> 00:00:38.650
At the end of the video, I noted that I am
really looking forward for more differentiable

00:00:38.650 --> 00:00:41.870
rendering and differentiable everything papers.

00:00:41.870 --> 00:00:47.940
So, fortunately, here we go, this new paper
introduces differentiable programming for

00:00:47.940 --> 00:00:49.640
physical simulations.

00:00:49.640 --> 00:00:51.790
So what does that mean exactly?

00:00:51.790 --> 00:00:55.260
Let’s look at a few examples and find out
together!

00:00:55.260 --> 00:00:59.630
Imagine that we have this billiard game, where
we would like to hit the white ball with just

00:00:59.630 --> 00:01:04.820
the right amount of force and from the right
direction, such that the blue ball ends up

00:01:04.820 --> 00:01:06.490
close to the black spot.

00:01:06.490 --> 00:01:07.980
Let’s try it.

00:01:07.980 --> 00:01:12.640
Well, this example shows that this doesn’t
happen by chance, and we have to engage in

00:01:12.640 --> 00:01:15.800
a fair amount of trial and error to make this
happen.

00:01:15.800 --> 00:01:20.600
What this differentiable programming system
does for us is that we can specify an end

00:01:20.600 --> 00:01:25.300
state, which is the blue ball on the black
dot, and it is able to compute the required

00:01:25.300 --> 00:01:28.780
forces and angles to make this happen.

00:01:28.780 --> 00:01:29.920
Very close.

00:01:29.920 --> 00:01:35.010
But the key point here is that this system
is general, and therefore can be applied to

00:01:35.010 --> 00:01:36.570
many-many more problems.

00:01:36.570 --> 00:01:40.830
We’ll have a look at a few that are much
more challenging than this example.

00:01:40.830 --> 00:01:46.240
For instance, it can also teach this gooey
object to actuate itself in a way so that

00:01:46.240 --> 00:01:50.130
it would start to walk properly within only
2 minutes.

00:01:50.130 --> 00:01:55.080
The 3D version of this simulation learned
so robustly, so that it can even withstand

00:01:55.080 --> 00:01:59.251
a few extra particles in the way.

00:01:59.251 --> 00:02:02.310
The next example is going to be obscenely
powerful.

00:02:02.310 --> 00:02:06.890
I’ll try to explain what this is to make
sure we can properly appreciate it.

00:02:06.890 --> 00:02:11.480
Many years ago, I was trying to solve a problem
called fluid control, where we would try to

00:02:11.480 --> 00:02:16.200
coerce a smoke plume or a piece of fluid to
take a given shape.

00:02:16.200 --> 00:02:18.890
Like a bunny, or a logo with letters.

00:02:18.890 --> 00:02:21.520
You can see some footage of this project here.

00:02:21.520 --> 00:02:26.580
The key difficulty of this problem is that
this is not what typically happens in reality,

00:02:26.580 --> 00:02:32.330
of course, a glass of spilled water is very
unlikely to suddenly take the shape of a human

00:02:32.330 --> 00:02:38.311
face, so we have to introduce changes to the
simulation itself, but at the same time, it

00:02:38.311 --> 00:02:41.930
still has to look as if it could happen in
nature.

00:02:41.930 --> 00:02:46.840
If you wish to know more about my work here,
the full thesis and the source code is available

00:02:46.840 --> 00:02:52.060
in the video description, and one of my kind
students has even implemented it in Blender.

00:02:52.060 --> 00:02:55.130
So, this problem is obscenely difficult.

00:02:55.130 --> 00:03:01.340
So you can now guess what’s next for this
differentiable technique…it starts out with

00:03:01.340 --> 00:03:06.849
a piece of simulated ink with a checkerboard
pattern, and it exerts just the appropriate

00:03:06.849 --> 00:03:11.850
forces so that it forms exactly the Yin-Yang
symbol shortly after.

00:03:11.850 --> 00:03:17.500
I am shocked by how such a general system
can perform something of this complexity.

00:03:17.500 --> 00:03:22.550
Having worked on this problem for a while,
I can tell you that this is immensely difficult.

00:03:22.550 --> 00:03:23.600
Amazing.

00:03:23.600 --> 00:03:26.620
And hold on to your papers, because it can
do even more.

00:03:26.620 --> 00:03:31.670
In this example, it adds carefully crafted
ripples to the water, to make sure that it

00:03:31.670 --> 00:03:37.940
ends up in a state that distorts the image
of the squirrel in a way that a powerful and

00:03:37.940 --> 00:03:43.580
well-known neural network sees it not as a
squirrel, but as a goldfish.

00:03:43.580 --> 00:03:46.870
This thing is basically a victory lap in the
paper.

00:03:46.870 --> 00:03:50.120
It is so powerful, it’s not even funny.

00:03:50.120 --> 00:03:55.159
You can just make up some problems that sound
completely impossible and it rips right through

00:03:55.159 --> 00:03:56.159
them.

00:03:56.159 --> 00:03:58.900
The full source code of this work is also
available.

00:03:58.900 --> 00:04:04.159
By the way, the first author of this paper
is Yuanming Hu, his work was showcased several

00:04:04.159 --> 00:04:08.239
times in this series, in one of the earlier
videos, we showcased his amazing Jello simulation

00:04:08.239 --> 00:04:13.840
that was implemented in so few lines of code,
it almost fits on a business card.

00:04:13.840 --> 00:04:17.000
I said it in a previous episode, and I will
say it again.

00:04:17.000 --> 00:04:22.090
I can’t wait to see more and more papers
in differentiable rendering and simulations.

00:04:22.090 --> 00:04:26.400
And as this work leaves plenty of room for
creativity for novel problem definitions,

00:04:26.400 --> 00:04:29.080
I’d love to hear what you think about it.

00:04:29.080 --> 00:04:30.990
What else could this be used for?

00:04:30.990 --> 00:04:34.699
Solving video games faster than other learning-based
techniques?

00:04:34.699 --> 00:04:35.699
Anything else?

00:04:35.699 --> 00:04:37.090
Let me know in the comments below.

00:04:37.090 --> 00:04:39.479
What a time to be alive!

00:04:39.479 --> 00:04:41.340
This episode has been supported by Weights
&amp; Biases.

00:04:41.340 --> 00:04:42.340
Here you see a beautiful final report on one
of their projects on classifying parts of

00:04:42.340 --> 00:04:43.340
street images, and see how these learning
algorithms evolve over time.

00:04:43.340 --> 00:04:47.350
Weights &amp; Biases provides tools to track your
experiments in your deep learning projects.

00:04:47.350 --> 00:04:51.370
It can save you a ton of time and money in
these projects and is being used by OpenAI,

00:04:51.370 --> 00:04:52.370
Toyota Research, Stanford and Berkeley.

00:04:52.370 --> 00:04:53.370
Make sure to visit them through wandb.com/papers
or just click the link in the video description

00:04:53.370 --> 00:04:54.370
and you can get a free demo today.

00:04:54.370 --> 00:04:55.370
Our thanks to Weights &amp; Biases for helping
us make better videos for you.

00:04:55.370 --> 00:04:56.370
This episode has been supported by Weights
&amp; Biases.

00:04:56.370 --> 00:04:57.370
Weights &amp; Biases provides tools to track your
experiments in your deep learning projects.

00:04:57.370 --> 00:04:58.370
It can save you a ton of time and money in
these projects and is being used by OpenAI,

00:04:58.370 --> 00:04:59.370
Toyota Research, Stanford and Berkeley.

00:04:59.370 --> 00:05:00.370
It is really easy to set up, so much so that
they have made an instrumentation for this

00:05:00.370 --> 00:05:03.340
exact paper we have talked about in this episode.

00:05:03.340 --> 00:05:04.560
Have a look here!

00:05:04.560 --> 00:05:13.370
Make sure to visit them through wandb.com/papers
or just click the link in the video description

00:05:13.370 --> 00:05:15.460
and you can get a free demo today.

00:05:15.460 --> 00:05:19.920
Our thanks to Weights &amp; Biases for helping
us make better videos for you.

00:05:19.920 --> 00:05:22.590
Thanks for watching and for your generous
support, and I'll see you next time!

