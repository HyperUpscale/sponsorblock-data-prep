WEBVTT
Kind: captions
Language: en

00:00:00.370 --> 00:00:04.040
Dear Fellow Scholars, this is Two Minute Papers
with Dr. Károly Zsolnai-Fehér.

00:00:04.040 --> 00:00:09.690
We have showcased this paper just a few months
ago, which was about creating virtual characters

00:00:09.690 --> 00:00:15.309
with a skeletal system, adding more than 300
muscles and teaching them to use these muscles

00:00:15.309 --> 00:00:21.020
to kick, jump, move around, and perform other
realistic human movements.

00:00:21.020 --> 00:00:26.510
It came with really cool insights as it could
portray how increasing the amount of weight

00:00:26.510 --> 00:00:31.480
to be lifted changes what muscles are being
trained during a workout.

00:00:31.480 --> 00:00:36.120
These agents also learned to jump really high
and you can see a drastic difference between

00:00:36.120 --> 00:00:41.280
the movement required for a mediocre jump
and an amazing one.

00:00:41.280 --> 00:00:46.059
Beyond that, it showed us how these virtual
characters would move if they were hamstrung

00:00:46.059 --> 00:00:52.600
by bone deformities, a stiff ankle, or muscle
deficiencies and watch them learn to walk

00:00:52.600 --> 00:00:54.350
despite these setbacks.

00:00:54.350 --> 00:00:59.430
We could even have a look at the improvements
after a virtual surgery takes place.

00:00:59.430 --> 00:01:05.330
So now, how about an even more elaborate technique
that focuses more on the muscle simulation

00:01:05.330 --> 00:01:06.330
part?

00:01:06.330 --> 00:01:10.990
The ropes here are simulated in a way that
the only interesting property of the particles

00:01:10.990 --> 00:01:14.230
holding them together is position.

00:01:14.230 --> 00:01:18.800
Cosserat rod simulations are an improvement
because they also take into consideration

00:01:18.800 --> 00:01:24.290
the orientation of the particles, and hence,
can simulate twists as well.

00:01:24.290 --> 00:01:29.810
And this new technique is called VIPER, and
adds a scale property to these particles,

00:01:29.810 --> 00:01:34.000
and hence, takes into consideration stretching
and compression.

00:01:34.000 --> 00:01:35.650
What does that mean?

00:01:35.650 --> 00:01:40.280
Well, it means that this can be used for a
lot of muscle-related simulation problems

00:01:40.280 --> 00:01:42.250
that you will see in a moment.

00:01:42.250 --> 00:01:48.310
However, before that, an important part is
inserting these objects into our simulations.

00:01:48.310 --> 00:01:52.660
The cool thing is that we don’t need to
get an artist to break up these surfaces into

00:01:52.660 --> 00:01:54.520
muscle fibers.

00:01:54.520 --> 00:01:59.380
That would not only be too laborious, but
of course, would also require a great deal

00:01:59.380 --> 00:02:00.990
of anatomical knowledge.

00:02:00.990 --> 00:02:07.190
Instead, this technique does all this automatically,
a process that the authors call…viperization.

00:02:07.190 --> 00:02:13.719
So, in goes the geometry, and out comes a
nice muscle model.

00:02:13.719 --> 00:02:17.560
This really opens up a world of really cool
applications.

00:02:17.560 --> 00:02:21.550
For instance, one such application is muscle
movement simulation.

00:02:21.550 --> 00:02:27.480
When attaching the muscles to bones, as we
move the character, the muscles move and contract

00:02:27.480 --> 00:02:29.700
accurately.

00:02:29.700 --> 00:02:41.409
Two, it can also perform muscle growth simulations.

00:02:41.409 --> 00:02:44.900
And three, we get more accurate soft body
physics.

00:02:44.900 --> 00:02:50.230
Or, in other words, we can animate gooey characters,
like this octopus.

00:02:50.230 --> 00:02:55.250
Okay, that all sounds great, but how expensive
is this?

00:02:55.250 --> 00:02:58.750
Do we have to wait a few seconds to minutes
to get this?

00:02:58.750 --> 00:03:00.950
No, no, not at all!

00:03:00.950 --> 00:03:06.000
This technique is really efficient and runs
in milliseconds, so we can throw in a couple

00:03:06.000 --> 00:03:07.420
more objects.

00:03:07.420 --> 00:03:12.939
And by couple, a computer graphics researcher
always means a couple dozen more, of course.

00:03:12.939 --> 00:03:17.999
And in the meantime, let’s look carefully
at the simulation timings!

00:03:17.999 --> 00:03:23.370
It starts from around 8-9 milliseconds per
frame, and with all these octopi, we’re

00:03:23.370 --> 00:03:26.430
still hovering around 10 milliseconds per
frame.

00:03:26.430 --> 00:03:31.260
That’s a hundred frames per second, which
means that the algorithm scales with the complexity

00:03:31.260 --> 00:03:33.379
of these scenes really well.

00:03:33.379 --> 00:03:40.040
This is one of those rare papers that is written
both very precisely, and it is absolutely

00:03:40.040 --> 00:03:41.239
beautiful.

00:03:41.239 --> 00:03:43.450
Make sure to have a look in the video description.

00:03:43.450 --> 00:03:46.400
The source code of the project is also available.

00:03:46.400 --> 00:03:51.019
With this, I hope that we’ll get even more
realistic characters with real muscle models

00:03:51.019 --> 00:03:54.030
in our computer games and real-time applications.

00:03:54.030 --> 00:03:56.409
What a time to be alive!

00:03:56.409 --> 00:03:58.800
This episode has been supported by Lambda.

00:03:58.800 --> 00:04:03.879
If you're a researcher or a startup looking
for cheap GPU compute to run these algorithms,

00:04:03.879 --> 00:04:06.459
check out Lambda GPU Cloud.

00:04:06.459 --> 00:04:11.290
I've talked about Lambda's GPU workstations
in other videos and am happy to tell you that

00:04:11.290 --> 00:04:14.340
they're offering GPU cloud services as well.

00:04:14.340 --> 00:04:22.220
The Lambda GPU Cloud can train Imagenet to
93% accuracy for less than $19! Lambda's web-based

00:04:22.220 --> 00:04:26.500
IDE lets you easily access your instance right
in your browser.

00:04:26.500 --> 00:04:31.650
And finally, hold on to your papers, because
the Lambda GPU Cloud costs less than half

00:04:31.650 --> 00:04:34.080
of AWS and Azure.

00:04:34.080 --> 00:04:40.090
Make sure to go to lambdalabs.com/papers and
sign up for one of their amazing GPU instances

00:04:40.090 --> 00:04:41.090
today.

00:04:41.090 --> 00:04:44.500
Our thanks to Lambda for helping us make better
videos for you.

00:04:44.500 --> 00:04:48.030
Thanks for watching and for your generous
support, and I'll see you next time!

