WEBVTT
Kind: captions
Language: en

00:00:00.370 --> 00:00:04.660
Dear Fellow Scholars, this is Two Minute Papers
with Dr. Károly Zsolnai-Fehér.

00:00:04.660 --> 00:00:08.420
Today we are going to play with a cellular
automaton.

00:00:08.420 --> 00:00:14.000
You can imagine these automata as small games
where we have a bunch of cells, and a set

00:00:14.000 --> 00:00:19.890
of simple rules that describe when a cell
should be full, and when it should be empty.

00:00:19.890 --> 00:00:23.860
These rules typically depend on the state
of the neighboring cells.

00:00:23.860 --> 00:00:29.640
For instance, perhaps the most well-known
form of this cellular automaton is John Horton

00:00:29.640 --> 00:00:35.300
Conway’s Game of Life, which a simulates
a tiny world where each cell represents a

00:00:35.300 --> 00:00:37.550
little life form.

00:00:37.550 --> 00:00:42.109
The rules, again, depend on the neighbors
of this cell - if there are too many neighbors,

00:00:42.109 --> 00:00:48.859
they will die due to overpopulation, if too
few, they will die due to underpopulation,

00:00:48.859 --> 00:00:53.969
and if they have just the right amount of
neighbors, they will thrive, and reproduce.

00:00:53.969 --> 00:00:56.379
So why is this so interesting?

00:00:56.379 --> 00:01:02.969
Well, this cellular automaton shows us that
a small set of simple rules can give rise

00:01:02.969 --> 00:01:09.860
to remarkably complex life forms, such as
gliders, spaceships, and even John von Neumann’s

00:01:09.860 --> 00:01:15.370
universal constructor, or in other words,
self-replicating machines.

00:01:15.370 --> 00:01:20.000
I hope you think that’s quite something,
and in this paper today, we are going to take

00:01:20.000 --> 00:01:21.730
this concept further.

00:01:21.730 --> 00:01:23.500
Way further!

00:01:23.500 --> 00:01:29.520
This cellular automaton is programmed to evolve
a single cell to grow into a prescribed kind

00:01:29.520 --> 00:01:31.060
of life form.

00:01:31.060 --> 00:01:35.350
Apart from that, there are many other key
differences from other works, and we will

00:01:35.350 --> 00:01:37.410
highlight two of them them today.

00:01:37.410 --> 00:01:43.550
One, the cell state is a little different
because it can either be empty, growing, or

00:01:43.550 --> 00:01:50.470
mature, and even more importantly, two, the
mathematical formulation of the problem is

00:01:50.470 --> 00:01:55.880
written in a way that is quite similar to
how we train a deep neural network to accomplish

00:01:55.880 --> 00:01:57.100
something.

00:01:57.100 --> 00:01:59.500
This is absolutely amazing.

00:01:59.500 --> 00:02:00.500
Why is that?

00:02:00.500 --> 00:02:06.460
Well, because it gives rise to a highly-useful
feature, namely that we can teach it to grow

00:02:06.460 --> 00:02:07.930
these prescribed organisms.

00:02:07.930 --> 00:02:17.690
But wait, over time, some of them seem to
decay, some of them can’t stop growing…and,

00:02:17.690 --> 00:02:22.780
some of them will be responsible for your
nightmares, so, from this point on, proceed

00:02:22.780 --> 00:02:25.239
with care.

00:02:25.239 --> 00:02:30.450
In the next experiment, the authors describe
an additional step in which it can recover

00:02:30.450 --> 00:02:32.849
from these undesirable states.

00:02:32.849 --> 00:02:37.670
And now, hold on to your papers, because this
leads to the one of the major points of this

00:02:37.670 --> 00:02:38.670
paper.

00:02:38.670 --> 00:02:44.230
If it can recover from undesirable states,
can it perhaps..regenerate when damaged?

00:02:44.230 --> 00:02:51.230
Well, here, you will see all kinds of damage…and
then, this happens.

00:02:51.230 --> 00:02:52.230
Wow!

00:02:52.230 --> 00:02:56.920
The best part is that this thing wasn’t
even trained to be able to perform this kind

00:02:56.920 --> 00:02:58.249
of regeneration!

00:02:58.249 --> 00:03:03.430
The objective for training was that it should
be able to perform its task of growing and

00:03:03.430 --> 00:03:10.090
maintaining shape, and it turns out, some
sort of regeneration is included in that.

00:03:10.090 --> 00:03:15.500
It can also handle rotations as well, which
will give rise to a lot of fun, as noted a

00:03:15.500 --> 00:03:18.920
moment ago, some nightmarish experiments.

00:03:18.920 --> 00:03:24.709
And, note that this is a paper in the Distill
journal, which not only means that it is excellent,

00:03:24.709 --> 00:03:30.029
but also interactive, so you can run many
of these experiments yourself right in your

00:03:30.029 --> 00:03:31.310
web browser.

00:03:31.310 --> 00:03:37.079
If Alexander Mordvintsev, the name of the
first author rings a bell, he worked on Google’s

00:03:37.079 --> 00:03:40.450
Deep Dreams approximately 5 years ago.

00:03:40.450 --> 00:03:43.400
How far we can some since, my goodness.

00:03:43.400 --> 00:03:48.190
Loving these crazy, non-traditional research
papers and am looking forward to seeing more

00:03:48.190 --> 00:03:49.190
of these.

00:03:49.190 --> 00:03:52.299
This episode has been supported by Weights
&amp; Biases.

00:03:52.299 --> 00:03:57.109
Here, they show you how you can visualize
the training process for your boosted trees

00:03:57.109 --> 00:03:59.700
with XGBoost using their tool.

00:03:59.700 --> 00:04:04.419
If you have a closer look, you’ll see that
all you need is one line of code.

00:04:04.419 --> 00:04:09.040
Weights &amp; Biases provides tools to track your
experiments in your deep learning projects.

00:04:09.040 --> 00:04:13.930
Their system is designed to save you a ton
of time and money, and it is actively used

00:04:13.930 --> 00:04:20.410
in projects at prestigious labs, such as OpenAI,
Toyota Research, GitHub, and more.

00:04:20.410 --> 00:04:25.650
And, the best part is that if you are an academic
or have an open source project, you can use

00:04:25.650 --> 00:04:26.950
their tools for free.

00:04:26.950 --> 00:04:29.870
It really is as good as it gets.

00:04:29.870 --> 00:04:35.860
Make sure to visit them through wandb.com/papers
or just click the link in the video description

00:04:35.860 --> 00:04:38.460
and you can get a free demo today.

00:04:38.460 --> 00:04:43.860
Our thanks to Weights &amp; Biases for their long-standing
support and for helping us make better videos

00:04:43.860 --> 00:04:44.860
for you.

00:04:44.860 --> 00:04:48.169
Thanks for watching and for your generous
support, and I'll see you next time!

